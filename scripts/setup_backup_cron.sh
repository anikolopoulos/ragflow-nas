#!/bin/bash
#
# RAGFlow Backup Cron Setup Script
# Sets up automated backup scheduling on QNAP NAS
#
# Author: Generated by Claude Code
# Version: 1.0
#

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_SCRIPT="${SCRIPT_DIR}/backup.sh"
VERIFY_SCRIPT="${SCRIPT_DIR}/verify_backup.sh"
CRON_FILE="/tmp/ragflow_cron_jobs"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    local level=$1
    shift
    local message="$*"
    
    case $level in
        "ERROR") echo -e "${RED}[ERROR] ${message}${NC}" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS] ${message}${NC}" ;;
        "WARNING") echo -e "${YELLOW}[WARNING] ${message}${NC}" ;;
        "INFO") echo -e "${BLUE}[INFO] ${message}${NC}" ;;
    esac
}

# Check prerequisites
check_prerequisites() {
    log "INFO" "Checking prerequisites..."
    
    # Check if backup script exists and is executable
    if [ ! -f "$BACKUP_SCRIPT" ]; then
        log "ERROR" "Backup script not found: $BACKUP_SCRIPT"
        exit 1
    fi
    
    if [ ! -x "$BACKUP_SCRIPT" ]; then
        log "INFO" "Making backup script executable..."
        chmod +x "$BACKUP_SCRIPT"
    fi
    
    # Check if verify script exists and is executable
    if [ ! -f "$VERIFY_SCRIPT" ]; then
        log "ERROR" "Verify script not found: $VERIFY_SCRIPT"
        exit 1
    fi
    
    if [ ! -x "$VERIFY_SCRIPT" ]; then
        log "INFO" "Making verify script executable..."
        chmod +x "$VERIFY_SCRIPT"
    fi
    
    # Check if cron is available
    if ! command -v crontab >/dev/null 2>&1; then
        log "ERROR" "crontab command not found. Please install cron."
        exit 1
    fi
    
    log "SUCCESS" "Prerequisites check completed"
}

# Create backup directory structure
setup_backup_directories() {
    log "INFO" "Setting up backup directory structure..."
    
    local backup_root="/share/backups/ragflow"
    local dirs=(
        "${backup_root}/daily"
        "${backup_root}/weekly"
        "${backup_root}/monthly"
        "${backup_root}/minio_mirror"
        "${backup_root}/scripts"
        "${backup_root}/logs"
    )
    
    for dir in "${dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            log "INFO" "Created directory: $dir"
        fi
    done
    
    # Copy scripts to backup directory
    cp "$BACKUP_SCRIPT" "${backup_root}/scripts/"
    cp "$VERIFY_SCRIPT" "${backup_root}/scripts/"
    cp "$0" "${backup_root}/scripts/"
    
    log "SUCCESS" "Backup directory structure ready"
}

# Generate cron jobs
generate_cron_jobs() {
    log "INFO" "Generating cron job configuration..."
    
    cat > "$CRON_FILE" << EOF
# RAGFlow Backup Automation
# Generated by setup_backup_cron.sh
#
# Backup Schedule:
# - Daily backup at 2:00 AM
# - Verification at 3:00 AM
# - Weekly verification report on Sundays at 4:00 AM
#
# Make sure to adjust paths and times according to your needs

# Daily backup at 2:00 AM
0 2 * * * ${BACKUP_SCRIPT} >> /share/backups/ragflow/logs/cron.log 2>&1

# Daily backup verification at 3:00 AM
0 3 * * * ${VERIFY_SCRIPT} --quick >> /share/backups/ragflow/logs/cron.log 2>&1

# Weekly detailed verification and report on Sundays at 4:00 AM
0 4 * * 0 ${VERIFY_SCRIPT} --all --report >> /share/backups/ragflow/logs/cron.log 2>&1

# Monthly cleanup and maintenance on 1st day at 5:00 AM
0 5 1 * * find /share/backups/ragflow/logs -name "*.log" -mtime +90 -delete >> /share/backups/ragflow/logs/cron.log 2>&1

EOF
    
    log "SUCCESS" "Cron jobs generated: $CRON_FILE"
}

# Install cron jobs
install_cron_jobs() {
    log "INFO" "Installing cron jobs..."
    
    # Backup existing crontab
    local existing_cron="/tmp/existing_crontab_backup_$(date +%Y%m%d_%H%M%S)"
    if crontab -l > "$existing_cron" 2>/dev/null; then
        log "INFO" "Existing crontab backed up to: $existing_cron"
    fi
    
    # Check if RAGFlow backup jobs already exist
    if crontab -l 2>/dev/null | grep -q "RAGFlow Backup"; then
        log "WARNING" "RAGFlow backup jobs already exist in crontab"
        read -p "Replace existing RAGFlow backup jobs? (y/N): " replace
        
        if [[ "$replace" =~ ^[Yy]$ ]]; then
            # Remove existing RAGFlow backup lines
            crontab -l 2>/dev/null | grep -v "RAGFlow Backup" > "$CRON_FILE.tmp" || true
            cat "$CRON_FILE" >> "$CRON_FILE.tmp"
            crontab "$CRON_FILE.tmp"
            rm "$CRON_FILE.tmp"
        else
            log "INFO" "Skipping cron job installation"
            return 0
        fi
    else
        # Add new jobs to existing crontab
        {
            crontab -l 2>/dev/null || true
            echo ""
            cat "$CRON_FILE"
        } | crontab -
    fi
    
    log "SUCCESS" "Cron jobs installed successfully"
}

# Test backup script
test_backup_script() {
    log "INFO" "Testing backup script..."
    
    # Create a test directory
    local test_dir="/tmp/ragflow_backup_test_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$test_dir"
    
    # Run backup script in test mode (if supported)
    if "$BACKUP_SCRIPT" --help 2>&1 | grep -q "test"; then
        if "$BACKUP_SCRIPT" --test > "$test_dir/test_output.log" 2>&1; then
            log "SUCCESS" "Backup script test passed"
        else
            log "ERROR" "Backup script test failed. Check: $test_dir/test_output.log"
            return 1
        fi
    else
        log "WARNING" "Backup script doesn't support test mode. Manual testing recommended."
    fi
    
    # Cleanup
    rm -rf "$test_dir"
}

# Create monitoring script
create_monitoring_script() {
    log "INFO" "Creating backup monitoring script..."
    
    local monitor_script="${SCRIPT_DIR}/monitor_backups.sh"
    
    cat > "$monitor_script" << 'EOF'
#!/bin/bash
#
# RAGFlow Backup Monitoring Script
# Checks backup health and sends notifications
#

BACKUP_ROOT="/share/backups/ragflow"
LOG_FILE="${BACKUP_ROOT}/logs/monitor_$(date +%Y%m%d).log"

# Email settings (configure as needed)
EMAIL_ENABLED=false
EMAIL_TO="admin@example.com"
EMAIL_SUBJECT="RAGFlow Backup Alert"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$1] $2" | tee -a "$LOG_FILE"
}

send_notification() {
    local message="$1"
    
    log "INFO" "Notification: $message"
    
    if [ "$EMAIL_ENABLED" = true ]; then
        echo "$message" | mail -s "$EMAIL_SUBJECT" "$EMAIL_TO"
    fi
}

check_recent_backup() {
    local today=$(date +%Y-%m-%d)
    local yesterday=$(date -d "yesterday" +%Y-%m-%d 2>/dev/null || date -v-1d +%Y-%m-%d)
    
    if [ -d "${BACKUP_ROOT}/daily/${today}" ]; then
        log "SUCCESS" "Today's backup found"
        return 0
    elif [ -d "${BACKUP_ROOT}/daily/${yesterday}" ]; then
        log "WARNING" "Today's backup missing, yesterday's backup exists"
        send_notification "Today's backup is missing for RAGFlow"
        return 1
    else
        log "ERROR" "No recent backups found"
        send_notification "CRITICAL: No recent backups found for RAGFlow"
        return 1
    fi
}

check_disk_space() {
    local usage=$(df "${BACKUP_ROOT}" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "$usage" -gt 90 ]; then
        log "ERROR" "Backup disk usage critical: ${usage}%"
        send_notification "CRITICAL: Backup disk usage at ${usage}%"
        return 1
    elif [ "$usage" -gt 80 ]; then
        log "WARNING" "Backup disk usage high: ${usage}%"
        send_notification "WARNING: Backup disk usage at ${usage}%"
        return 1
    else
        log "SUCCESS" "Backup disk usage normal: ${usage}%"
        return 0
    fi
}

main() {
    log "INFO" "Starting backup monitoring check"
    
    local issues=0
    
    if ! check_recent_backup; then
        issues=$((issues + 1))
    fi
    
    if ! check_disk_space; then
        issues=$((issues + 1))
    fi
    
    if [ $issues -eq 0 ]; then
        log "SUCCESS" "All backup health checks passed"
    else
        log "WARNING" "$issues issues found during health check"
    fi
    
    log "INFO" "Backup monitoring check completed"
}

main "$@"
EOF
    
    chmod +x "$monitor_script"
    log "SUCCESS" "Monitoring script created: $monitor_script"
}

# Display installation summary
show_summary() {
    log "INFO" "=== RAGFlow Backup Setup Summary ==="
    
    cat << EOF

Backup System Configuration:
============================

Scripts Installed:
  - Backup Script: ${BACKUP_SCRIPT}
  - Restore Script: ${VERIFY_SCRIPT}  
  - Verification Script: ${VERIFY_SCRIPT}
  - Monitoring Script: ${SCRIPT_DIR}/monitor_backups.sh

Backup Schedule:
  - Daily backup: 02:00 AM
  - Daily verification: 03:00 AM  
  - Weekly report: Sunday 04:00 AM
  - Monthly cleanup: 1st day 05:00 AM

Backup Locations:
  - Daily: /share/backups/ragflow/daily/
  - Weekly: /share/backups/ragflow/weekly/
  - Monthly: /share/backups/ragflow/monthly/
  - MinIO Mirror: /share/backups/ragflow/minio_mirror/
  - Logs: /share/backups/ragflow/logs/

Manual Commands:
  - Run backup: ${BACKUP_SCRIPT}
  - Verify backup: ${VERIFY_SCRIPT} --date YYYY-MM-DD
  - List backups: ${VERIFY_SCRIPT} --list
  - Restore: ${SCRIPT_DIR}/restore.sh --help

Next Steps:
  1. Test the backup: ${BACKUP_SCRIPT}
  2. Verify cron jobs: crontab -l
  3. Monitor logs: tail -f /share/backups/ragflow/logs/cron.log
  4. Configure email notifications in monitor_backups.sh

EOF

    log "SUCCESS" "Setup completed successfully!"
}

# Main function
main() {
    local install_cron=true
    local test_scripts=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-cron)
                install_cron=false
                shift
                ;;
            --test)
                test_scripts=true
                shift
                ;;
            -h|--help)
                cat << EOF
RAGFlow Backup Setup Script

Usage: $0 [OPTIONS]

Options:
    --no-cron      Skip cron job installation
    --test         Test backup scripts after setup
    -h, --help     Show this help message

EOF
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    log "INFO" "=== RAGFlow Backup Setup Started ==="
    
    check_prerequisites
    setup_backup_directories
    
    if [ "$install_cron" = true ]; then
        generate_cron_jobs
        install_cron_jobs
    fi
    
    create_monitoring_script
    
    if [ "$test_scripts" = true ]; then
        test_backup_script
    fi
    
    show_summary
    
    # Cleanup
    rm -f "$CRON_FILE"
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi